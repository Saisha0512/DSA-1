/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[][] spiralMatrix(int m, int n, ListNode head) {
        int[][] matrix = new int[m][n];
        
        // Initialize the matrix with -1
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = -1;
            }
        }

        int top = 0, bottom = m - 1, left = 0, right = n - 1;
        ListNode current = head;

        while (top <= bottom && left <= right && current != null) {
            // Fill top row (left to right)
            for (int col = left; col <= right && current != null; col++) {
                matrix[top][col] = current.val;
                current = current.next;
            }
            top++;

            // Fill right column (top to bottom)
            for (int row = top; row <= bottom && current != null; row++) {
                matrix[row][right] = current.val;
                current = current.next;
            }
            right--;

            // Fill bottom row (right to left)
            for (int col = right; col >= left && current != null; col--) {
                matrix[bottom][col] = current.val;
                current = current.next;
            }
            bottom--;

            // Fill left column (bottom to top)
            for (int row = bottom; row >= top && current != null; row--) {
                matrix[row][left] = current.val;
                current = current.next;
            }
            left++;
        }

        return matrix;
    }
}
